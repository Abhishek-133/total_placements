16
import java.util.*;
public class Main
{
	public static void main(String[] args) {
		System.out.println("Hello World");
		String s = "abcabcbb";
		int l  = 0;
		int r = 0;
		int res = 0;
		Set<Character> set = new HashSet<>();
		for(r=0;r<s.length();r++){
		    char c = s.charAt(r);
		
		    while(set.contains(c)){
		        set.remove(c);
		        l++;
		    }
		    set.add(c);
		    res = Math.max(res,r-l+1);
		}
		System.out.print("res->"+res);
		
	}
}

17.

18.
import java.util.*;
public class Main{
    public static void main(String[] args) {
        String s1 = "ab", s2 = "eidbaooo";
        if (s1.length() > s2.length()) {
            System.out.println("False");
        }

        int[] freq1 = new int[26];
        int[] freq2 = new int[26];
        int n = freq1.length;
        int m = freq2.length;
        boolean isEqual = false;

        for (int i = 0; i < n; i++) {
            freq1[s1.charAt(i) - 'a']++;
        }

        for (int j = 0; j < m; j++) {
            freq2[s2.charAt(j) - 'a']++;

            if (j >= n) {
                freq2[s2.charAt(j - n) - 'a']--;
            }

            if (Arrays.equals(freq1, freq2)) {
                isEqual = true;
            }
        }

        if (isEqual) {
            System.out.print("true");
        } else {
            System.out.print("false");
        }
    }
}


//21.valid parantheseis
import java.util.*;
public class Main{
    public static void main(String[] args) {
    //   String s = "()";
      String s = "()[]{}[";
       Stack<Character> stk = new Stack<>();
       for(char c:s.toCharArray()){
           if(c=='('||c=='['||c=='{'){
               stk.push(c);
           }
           else{
           if(stk.isEmpty())System.out.print("f");
           if(c==')'&&stk.peek()=='('||
           c==']'&&stk.peek()=='['||
           c=='}'&&stk.peek()=='{'
           ){
               stk.pop();
           }
       }
       }
       
       if(stk.isEmpty()){
           System.out.print("t");
       }else{
           System.out.print("f");
       }
       
    }
}

//evaluate reverse polish notation
import java.util.*;
public class Main{
    public static void main(String[] args) {
    Stack<Integer> stk = new Stack<>();
    String[] tokens = {"4","13","5","/","+"};
    for(String val:tokens){
        if(val.equals("+")){
            int n1 = stk.pop();
            int n2 = stk.pop();
            int res = n2+n1;
            stk.push(res);
        }else if(val.equals("-")){
            int n1 = stk.pop();
            int n2 = stk.pop();
            int res = n2-n1;
            stk.push(res);
        }else if(val.equals("*")){
            int n1 = stk.pop();
            int n2 = stk.pop();
            int res = n2*n1;
            stk.push(res);
        }else if(val.equals("/")){
            int n1 = stk.pop();
            int n2 = stk.pop();
            int res = n2/n1;
            stk.push(res);
        }else{
            int n = Integer.parseInt(val);
            stk.push(n);
        }
    }
    System.out.print(stk.peek());
    }
}

24.//Backtracking

25.
import java.util.*;
public class Main{
    public static void main(String[] args) {
    int[] temperatures = {73,74,75,71,69,72,76,73};
    int n=temperatures.length;
        int[] arr=new int[n];
        Stack<Integer> stk=new Stack<>();
        for(int currDay=0;currDay<n;currDay++){
            int todayTemp=temperatures[currDay];
            while(!stk.isEmpty()&&temperatures[stk.peek()]<todayTemp){
                int prevDay=stk.pop();
                
                arr[prevDay]=currDay-prevDay;
            }
            stk.push(currDay);
            
           
        }
        for(int i:arr){
                System.out.print(i+"->");
            }
    }
}

29.Search in a matrix using binary search
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int rows = matrix.length;
        int cols = matrix[0].length;
        
        int left = 0;
        int right = rows*cols-1;
        while(left<=right){
            int mid = (left+right)/2;
            int midValue = matrix[mid/cols][mid%cols];
            if(midValue==target){
                return true;
            }
            else if(midValue<target){
                left = mid+1;
            }else{
                right = mid-1;
            }
        }
        return false;
    }
}

//Sorting algorithms leetcode
1.O(N*N)
import java.util.*;
public class Main
{
	public static void main(String[] args) {
	//Bubble short
	int[] nums = {5,1,4,2,8};
	for(int i=0;i<nums.length;i++){
	    for(int j=0;j<nums.length-i-1;j++){
	        if(nums[j]>nums[j+1]){
	            int temp = nums[j];
	            nums[j] = nums[j+1];
	            nums[j+1] = temp;
	        }
	    }
	}
	for(int val:nums){
	    System.out.print(val+" ");
	}
	}
}
2.Selection Sort
import java.util.*;
public class Main
{
	public static void main(String[] args) {
		
	int[] arr = {5,1,4,2,8};
	    int n = arr.length;
	    for(int i=0;i<n-1;i++){
	        int minIndex = i;
	        for(int j =i+1;j<n;j++){
	            if(arr[minIndex]>arr[j]){
	                minIndex = j;
	            }
	            
	        }
	        int temp = arr[i];
	            arr[i] = arr[minIndex];
	            arr[minIndex] = temp;
	    }
	    for(int val:arr){
	        System.out.print(val+" ");
	    }
	}
}

3.Insertion code in java
public class InsertionSort {
    public static void sort(int arr[]) {
        int n = arr.length;
        for (int i = 1; i < n; ++i) {
            int key = arr[i];
            int j = i - 1;
            while (j >= 0 && arr[j] > key) {
                arr[j + 1] = arr[j];
                j = j - 1;
            }
            arr[j + 1] = key;
        }
    }

    public static void printArray(int arr[]) {
        int n = arr.length;
        for (int i = 0; i < n; ++i)
            System.out.print(arr[i] + " ");
        System.out.println();
    }

    public static void main(String args[]) {
        int arr[] = { 12, 11, 13, 5, 6 };
        InsertionSort ob = new InsertionSort();
        ob.sort(arr);
        printArray(arr);
    }
}

4.Merge Sort
public class MergeSort {
    public static void mergeSort(int[] arr, int left, int right) {
        if (left < right) {
            int mid = (left + right) / 2;
            mergeSort(arr, left, mid);
            mergeSort(arr, mid + 1, right);
            merge(arr, left, mid, right);
        }
    }

    public static void merge(int[] arr, int left, int mid, int right) {
        int n1 = mid - left + 1;
        int n2 = right - mid;

        int[] leftArr = new int[n1];
        int[] rightArr = new int[n2];

        for (int i = 0; i < n1; ++i)
            leftArr[i] = arr[left + i];
        for (int j = 0; j < n2; ++j)
            rightArr[j] = arr[mid + 1 + j];

        int i = 0, j = 0;
        int k = left;
        while (i < n1 && j < n2) {
            if (leftArr[i] <= rightArr[j]) {
                arr[k] = leftArr[i];
                i++;
            } else {
                arr[k] = rightArr[j];
                j++;
            }
            k++;
        }

        while (i < n1) {
            arr[k] = leftArr[i];
            i++;
            k++;
        }

        while (j < n2) {
            arr[k] = rightArr[j];
            j++;
            k++;
        }
    }

    public static void main(String[] args) {
        int[] arr = { 12, 11, 13, 5, 6, 7 };
        System.out.println("Given Array");
        printArray(arr);

        mergeSort(arr, 0, arr.length - 1);

        System.out.println("\nSorted array");
        printArray(arr);
    }

    public static void printArray(int[] arr) {
        int n = arr.length;
        for (int i = 0; i < n; ++i)
            System.out.print(arr[i] + " ");
        System.out.println();
    }
}

//39. Remove nth node from  the end of the linkedlist
class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        if(head==null || head.next==null)return null;
        ListNode dummy = new ListNode();
        dummy.next = head;
        ListNode left = dummy;
        ListNode right = head;

        for(int i=0;i<n;i++){
            right = right.next;
        }

        while(right!=null){
            left = left.next;
            right = right.next;
        }
        left.next = left.next.next;
        return dummy.next;
    }
}

//40.Add two numbers in a linkedlist
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode dummy = new ListNode();
        ListNode temp = dummy;
        int carry = 0;
        while(l1!=null||l2!=null||carry!=0){
            int sum = 0;
            if(l1!=null){
                sum+=l1.val;
                l1 = l1.next;
            }
            if(l2!=null){
                sum+=l2.val;
                l2 = l2.next;
            }
            sum+=carry;
            carry = sum/10;
            ListNode node = new ListNode(sum%10);
            temp.next = node;
            temp = temp.next;
        }
        return dummy.next;
    }
}

